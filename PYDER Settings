#!/usr/bin/env python
# --------------- Creation ----------------

from easysettings import EasySettings

settings = EasySettings("myconfigfile.conf")

# configfile_exists() checks for existing config, and creates one if needed.
# ** this function is called automatically now when a filename is passed to easysettings. **
# if you wish to disable it, just do: settings = EasySettings() and set
# settings.configfile later.

# ------------- Basic Functions -----------
# set without saving
settings.set("username", "cjw")
settings.set("firstrun", False)

print settings.get("username")
# this results in "cjw"

# check if file is saved
if not settings.is_saved():
    print "you haven't saved the settings to disk yet."

# ...settings are still available even if they haven't
#    been saved to disk

# save
settings.save()

# you may also set & save in one line...
settings.setsave("homedir", "/myuserdir")
Advanced:
# check if setting exists if you want
if settings.has_option('username'):
    print "Yes, settings has 'username'"

# list settings/options/values
mysettings = settings.list_settings()
myoptions = settings.list_options()
myvalues = settings.list_values()

# remove setting
settings.remove('homedir')

# clear all option names and values
settings.clear()

# clear all values, leave option names.
settings.clear_values()
Comparison:
# compare two settings objects
settings2 = EasySettings('myconfigfile2.conf')

if settings.compare_opts(settings2):
    print "these have the same exact options, values may differ"
if settings.compare_vals(settings2):
    print "these have the exact same values, options may differ"

if settings == settings2:
    print "these have the exact same settings/values"
    # can also be written as settings.compare_settings(settings2)
    # if you like typing.. :)

if settings > settings2:
    print "settings has more options than settings2"
# all of them work ==, !=, <=, >= , > , <
# ... the < > features are based on amount of options.
#     the = features are based on option names and values.
Features
EasySettings has the basic features you would expect out of a settings module, and it’s very easy to use. If your project needs to save simple settings without the overhead and complication of other modules then this is for you. Save, load, set, & get are very easy to grasp. The more advanced features are there for you to use, but don’t get in the way. Settings, options, & values can be listed, searched, detected, removed, & cleared.

EasySettings uses a dictionary to store settings before writing to disk, so you can also access settings like a dictionary object using easysettings.settings. The setsave() function will save every time you set an option, and is_saved() will tell you whether or not the file has been saved to disk yet. Code is documented for a newbie, so a help('EasySettings') in the python console will get you started.

The search_query argument in the list functions lets you find settings, options, and values by search string:

mydebugoptions = settings.list_options('debug')
# clear all debug values..
settings.clear_values(mydebugoptions)
Non-string types were added, so any type that can be pickled can be used as an option’s value. This includes all the major types like int, long, float, boolean, and list. All of these values will be retrieved as the same type that was set:

es = EasySettings('myconfigfile.conf')

# Boolean
es.set("newuser", True)
if es.get('newuser'):
    print "now you can use get() as a boolean."

# Integer
es.set('maxwidth', 560)
halfwidth = es.get('maxwidth') / 2 # this math works.

# Float
es.set('soda', 1.59)
f_withtax = es.get('soda') * 1.08

# List
es.set('users', ['cjw', 'joseph', 'amy']) # lists as settings, very convenient
for suser in es.get('users'):
    print "retrieved user name: " + suser

# i won't do them all, but if you can pickle it, you can use it with easysettings.
